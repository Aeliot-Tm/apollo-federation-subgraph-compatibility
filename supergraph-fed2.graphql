
schema
  @core(feature: "https://specs.apollo.dev/core/v0.2")
  @core(feature: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
  query: Query
}

directive @core(feature: String!, as: String, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

enum core__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type DeliveryEstimates
  @join__type(graph: INVENTORY)
{
  estimatedDelivery: String
  fastestDelivery: String
}

scalar join__FieldSet

enum join__Graph {
  INVENTORY @join__graph(name: "inventory", url: "http://inventory:4003")
  PRODUCTS @join__graph(name: "products", url: "http://products:4001")
  USERS @join__graph(name: "users", url: "http://users:4002")
}

type Product
  @join__type(graph: INVENTORY, key: "id")
  @join__type(graph: PRODUCTS, key: "id")
  @join__type(graph: PRODUCTS, key: "sku package")
  @join__type(graph: PRODUCTS, key: "sku variation { id }")
{
  id: ID!
  dimensions: ProductDimension @join__field(graph: INVENTORY, external: true) @join__field(graph: PRODUCTS)
  delivery(zip: String): DeliveryEstimates @join__field(graph: INVENTORY, requires: "dimensions { size weight }")
  sku: String @join__field(graph: PRODUCTS)
  package: String @join__field(graph: PRODUCTS)
  variation: ProductVariation @join__field(graph: PRODUCTS)
  createdBy: User @join__field(graph: PRODUCTS, provides: "totalProductsCreated")
}

type ProductDimension
  @join__type(graph: INVENTORY)
  @join__type(graph: PRODUCTS)
{
  size: String
  weight: Float
}

type ProductVariation
  @join__type(graph: PRODUCTS)
{
  id: ID!
}

type Query
  @join__type(graph: INVENTORY)
  @join__type(graph: PRODUCTS)
  @join__type(graph: USERS)
{
  product(id: ID!): Product @join__field(graph: PRODUCTS)
}

type User
  @join__type(graph: PRODUCTS, key: "email")
  @join__type(graph: USERS, key: "email")
{
  email: ID!
  totalProductsCreated: Int @join__field(graph: PRODUCTS, external: true) @join__field(graph: USERS)
  name: String @join__field(graph: USERS)
}